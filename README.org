:PROPERTIES:
:ID:       54eebe4b-9722-4c7c-8d7e-8d6eaf411599
:END:
#+title: Neil Munro's Common Lisp Course
#+description: as transcribed by chumutt

[[https://www.youtube.com/watch?v=xyXDE5gP2QI&list=PLCpux10P7KDKPb4eI5b_qSnQaY1ePGKGK&pp=iAQB][Common Lisp]]

* 1. Coin Toss
:PROPERTIES:
:ID:       d342121c-94a8-465b-a4a2-1dae53a16060
:END:

#+name: 1-package
#+begin_src lisp :tangle no :exports code
(defpackage coin-toss
  (:use :cl))
(in-package :coin-toss)
#+end_src

#+name: 1-tosscoin
#+begin_src lisp :tangle no :exports code
(defun toss-coin ()
  "Generates a random 'heads' or 'tails'."
  (let ((number (random 2 (make-random-state t))))
    (if (= number 0)
        "heads"
        "tails")))
#+end_src

#+RESULTS: 1-tosscoin
: TOSS-COIN

#+name: 1-prompt
#+begin_src lisp :tangle no :exports code
(defun prompt ()
  "Gets user input, loops if it's not 'heads' or 'tails'."
  (format t "Please enter heads or tails: ")
  (force-output)
  (let ((guess (string-downcase (read-line))))
    (if (or (string= guess "heads")
            (string= guess "tails"))
        guess
        (prompt))))
#+end_src

#+RESULTS: 1-prompt
: PROMPT

#+name: 1-game
#+begin_src lisp :tangle no :exports code
(defun game ()
  "Runs the actual game."
  (if (string= (prompt)
               (toss-coin))
      (format t "You win!~%")
      (format t "You lose!~%")))
#+end_src

#+RESULTS: 1-game
: GAME

#+name: cointoss
#+begin_src lisp :tangle 1/main.lisp :mkdirp yes :noweb yes :exports code
<<1-package>>

<<1-tosscoin>>

<<1-prompt>>

<<1-game>>
#+end_src

Running game and entering a guess of "heads":

#+begin_src lisp :tangle no :results output
(game)
#+end_src

#+RESULTS:
: Please enter heads or tails: You win!

#+begin_example
CL-USER> (game)
Please enter heads or tails: heads
You win!

NIL
CL-USER>
#+end_example


* 2. Rock Paper Scissors
:PROPERTIES:
:ID:       083d63d5-f4df-414c-8613-335af4824e83
:END:

#+name: 2-package
#+begin_src lisp :tangle no :exports code
(defpackage rps
  (:use :cl))
(in-package :rps)
#+end_src

#+name:
#+begin_src lisp :tangle no :exports code

#+end_src

#+name:
#+begin_src lisp :tangle no :exports code

#+end_src

#+name:
#+begin_src lisp :tangle no :exports code

#+end_src

#+name:
#+begin_src lisp :tangle no :exports code

#+end_src

#+name: rps
#+begin_src lisp :tangle 2/main.lisp :mkdirp yes :noweb yes :exports code
<<2-package>>

#+end_src

* 3. Hangman
* 4. Tic Tac Toe
** 4a.
** 4b.
** 4c
* 5. Condition System
** 5a.
** 5b.
* 6. Macros
** 6a.
** 6b.
* 7. File I/O
** 7a.
** 7b.
** 7c.
* 8. Functional Programming
** 8a. Map
** 8b. Filter
** 8c. Reduce
** 8d. Map/Reduce
** 8e. Lambdas
** 8f. (More) Lambdas
** 8g. (Even More) Lambdas
* 9. Packages
** 9a.
** 9b. ASDF
** 9c. ASDF Testing
** 9d. Rove Testing
* Project 1: Turing Machine
** Part 1
** Part 2
** Part 3
** Part 4
** Part 5
* 10. Object Oriented Programming (OOP)
** 10a. Basic Structures (Structs)
** 10b. Basic Classes
** 10c. Basic Methods
** 10d. Auxiliary (Aux) Methods
